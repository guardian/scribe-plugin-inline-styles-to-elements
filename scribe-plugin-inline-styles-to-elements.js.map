{"version":3,"file":"scribe-plugin-inline-styles-to-elements.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3FA,AD4FA;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../src/inline-styles-formatter.js","../src/as-html-formatter.js","../src/scribe-plugin-inline-styles-to-elements.js"],"sourcesContent":["define('inline-styles-formatter',[], function () {\n\n  'use strict';\n\n  /* API helpers */\n\n  // these do not need to be wrapped because their style is\n  // implicit in their NodeType\n  var styleElements = [\"B\", \"STRONG\", \"I\", \"EM\", \"U\", \"STRIKE\", \"SUP\", \"SMALL\", \"SUB\"];\n\n  function isStyleElement(n) {\n    return styleElements.indexOf(n.nodeName);\n  }\n\n  function isElement(node) {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n\n  function appendTraversedChildrenTo(n, parentNode, mapper) {\n    var child = n.firstChild;\n    while (child) {\n      var mappedChild = traverse(child, mapper);\n      if (mappedChild) {\n        parentNode.appendChild(mappedChild);\n      }\n      child = child.nextSibling;\n    }\n    return parentNode;\n  }\n\n  function appendTraversedChildren(n, mapper) {\n    return appendTraversedChildrenTo(n, n.cloneNode(false), mapper);\n  }\n\n  function traverse(node, mapper) {\n    return mapper(node, mapper);\n  }\n\n\n\n  /* Map style property to an element */\n\n  function styleToElement(styleProp, styleValue, elName) {\n    return function(n, mapper) {\n      if (isElement(n) && n.style[styleProp] === styleValue && !isStyleElement(n)) {\n        var strongWrapper = document.createElement(elName);\n        var child = n.firstChild;\n        while (child) {\n          // FIXME: avoid deep cloneNode here somehow? traverse?\n          strongWrapper.appendChild(child.cloneNode(true));\n          child = child.nextSibling;\n        }\n\n        var nCopy = n.cloneNode(false);\n        nCopy.style[styleProp] = null;\n\n        // Remove any 'style=\"\"' for consistency\n        if (nCopy.getAttribute('style') === '') {\n          nCopy.removeAttribute('style');\n        }\n\n        nCopy.appendChild(traverse(strongWrapper, mapper));\n        return nCopy;\n      } else {\n        return appendTraversedChildren(n, mapper);\n      }\n    };\n  }\n\n\n  var filters = [\n    styleToElement('fontWeight', 'bold',   'b'),\n    styleToElement('fontStyle',  'italic', 'i'),\n    styleToElement('textDecoration',     'underline',    'u'),\n    styleToElement('textDecoration',     'line-through', 'strike'),\n    // Note: in newer browsers that support it, may appear as\n    // text-decoration-line instead\n    styleToElement('textDecorationLine', 'underline',    'u'),\n    styleToElement('textDecorationLine', 'line-through', 'strike')\n    // TODO: headings?\n    // TODO: clear empty styles?\n  ];\n\n  function applyFilters(node) {\n    return filters.reduce(traverse, node);\n  }\n\n  return applyFilters;\n\n});\n\n","define('as-html-formatter',[], function () {\n\n  'use strict';\n\n  function asHtmlFormatter(domFormatter) {\n    return function(html) {\n      var bin = document.createElement('div');\n      bin.innerHTML = html;\n\n      return domFormatter(bin).innerHTML;\n    };\n  }\n\n  return asHtmlFormatter;\n});\n\n","define('scribe-plugin-inline-styles-to-elements',[\n  './inline-styles-formatter',\n  './as-html-formatter'\n], function (\n  inlineStylesFormatter,\n  asHtmlFormatter\n) {\n\n  'use strict';\n\n  return function () {\n\n    return function (scribe) {\n      scribe.registerHTMLFormatter('sanitize',\n        asHtmlFormatter(inlineStylesFormatter)\n      );\n    };\n  };\n\n});\n\n"],"names":[]}